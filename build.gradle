buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }

    dependencies {
        classpath(group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true) {
            exclude group: 'trove', module: 'trove'
        }
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:$spotless_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

apply plugin: 'kotlin'
apply plugin: "com.diffplug.gradle.spotless"
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'net.minecraftforge.gradle'

// Versions follow this format: MCVERSION-MAJORMOD.MAJORAPI.MINOR.PATCH.
version = "${minecraft_version()}-$mod_version"
group = "com.deflatedpickle.$mod_id"
archivesBaseName = "$mod_id"

sourceCompatibility = targetCompatibility = "$jvm_version"
compileJava {
    sourceCompatibility = targetCompatibility = "$jvm_version"
}

minecraft {
    mappings channel: "$snapshot_channel", version: "$snapshot_version-${minecraft_version_short()}"

    accessTransformer = file('src/main/resources/META-INF/bugmagic_at.cfg')

    runs {
        client {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

repositories {
    jcenter()
    maven { url = "http://maven.shadowfacts.net/" }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven { url = 'https://repo.elytradev.com/' }
    maven { url = "https://maven.mcmoddev.com/" }
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version()}-$forge_version"

    implementation "net.shadowfacts:Forgelin:$forgelin_version"
    implementation "picklelib:picklelib:${minecraft_version()}:$picklelib_version"
    implementation "modelloader:modelloader:$modelloader_version"
    // implementation 'com.elytradev:mirage:2.0.3-rc3-SNAPSHOT'
    // implementation "net.ilexiconn:llibrary:1.7.19-1.12.2:dev"
    // implementation "guide-api:Guide-API-1.12:2.1.6:61"
    implementation "glasspane:glasspane:${minecraft_version()}:$glasspane_version"
    // implementation "ctm:CTM:MC1.12.2:0.3.3.22"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "$mod_id",
                "Specification-Vendor"    : "$developer",
                "Specification-Version"   : "$mod_version",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "$developer",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat()

        licenseHeader '/* Copyright (c) $YEAR DeflatedPickle under the MIT license */\n\n'
    }

    kotlin {
        ktlint()

        licenseHeader '/* Copyright (c) $YEAR DeflatedPickle under the MIT license */\n\n'
    }
}

dokka {
    outputFormat = 'javadoc'
    outputDirectory = 'docs'

    configuration {
        reportUndocumented = true

        targets = ["JVM"]
        platform = "JVM"
    }
}

String minecraft_version() {
    return "$minecraft_major.$minecraft_minor.$minecraft_patch"
}

String minecraft_version_short() {
    return "$minecraft_major.$minecraft_minor"
}
