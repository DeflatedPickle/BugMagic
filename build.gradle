import wtf.gofancy.fancygradle.patch.Patch

buildscript {
    repositories {
        maven { url = "https://files.minecraftforge.net/maven" }
    }

    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:$forgegradle_version"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm'

    id 'wtf.gofancy.fancygradle'

    id 'org.jetbrains.dokka'
    id 'com.diffplug.spotless'
}

apply plugin: 'net.minecraftforge.gradle'

// Versions follow this format: MCVERSION-MAJORMOD.MAJORAPI.MINOR.PATCH.
version = "${minecraft_version()}-$mod_version"
group = "com.deflatedpickle.$mod_id"
archivesBaseName = "$mod_id"

sourceCompatibility = targetCompatibility = "$jvm_version"

sourceSets {
    main {
        output.resourcesDir = file('build/combined')
        java.outputDir = file('build/combined')
    }
}

repositories {
    maven {
        name = "ShadowFacts"
        url = "http://maven.shadowfacts.net/"
    }
    maven {
        name = "ElytraDev"
        url = 'https://repo.elytradev.com/'
    }
    maven {
        name = "MCModDev"
        url = "https://maven.mcmoddev.com/"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    mavenCentral()
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.32'

    // BugMagic is written mostly in Kotlin, using objects
    // For this we require a different loader
    // https://www.curseforge.com/minecraft/mc-mods/shadowfacts-forgelin
    implementation "net.shadowfacts:Forgelin:$forgelin_version"
    // I occasionally move util from my mods to PickleLib to use from other mods
    // implementation "picklelib:picklelib:${minecraft_version()}:$picklelib_version"
    implementation "curse.maven:picklelib-291265:2865726"
    // I want a nice editor for my entity models, this format has a nice editor
    // implementation "modelloader:modelloader:$modelloader_version"
    implementation "curse.maven:modelloader-277663:2744735"
    // GlassPane provides a way to automatically register things
    // We can probably stop using this at some point, if nothing else from GlassPane is used
    // implementation "glasspane:glasspane:${minecraft_version()}:$glasspane_version"
    implementation "curse.maven:glasspane-292852:2619261"

    // implementation 'com.elytradev:mirage:2.0.3-rc3-SNAPSHOT'
    // implementation "ctm:CTM:MC1.12.2:0.3.3.22"
}

/*minecraft {
    version = "${minecraft_version()}-$forge_version"
    runDir = "run"

    mappings = "${mappings_channel}_$mappings_version"
}*/

minecraft {
    mappings channel: "$mappings_channel", version: "$mappings_version-1.12"

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

fancyGradle {
    patches {
        patch(
                Patch.RESOURCES,
                Patch.COREMODS,
                Patch.CODE_CHICKEN_LIB,
                Patch.ASM
        )
    }
}

processResources {
    /*inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }*/

    rename '(.+_at.cfg)', 'META-INF/$1'
}

jar {
    manifest {
        attributes 'FMLAT': 'bugmagic_at.cfg'
    }
}

compileJava {
    sourceCompatibility = targetCompatibility = "$jvm_version"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat()

        licenseHeader '/* Copyright (c) $YEAR DeflatedPickle under the MIT license */\n\n'
    }

    kotlin {
        ktlint()

        licenseHeader '/* Copyright (c) $YEAR DeflatedPickle under the MIT license */\n\n'
    }
}

dokka {
    outputFormat = 'javadoc'
    outputDirectory = 'docs'

    configuration {
        reportUndocumented = true

        targets = ["JVM"]
        platform = "JVM"
    }
}

String minecraft_version() {
    return "$minecraft_major.$minecraft_minor.$minecraft_patch"
}

String minecraft_version_short() {
    return "$minecraft_major.$minecraft_minor"
}
